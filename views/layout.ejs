<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/sockets.js"></script>
    <!--SCRIPTS END-->
    <script>
      // io.socket.get ("/user", function(event){
      //   console.log("abriedno listado de usuarios!")
      // })
      // io.socket.on('connect', function(socket) 
      // {
      //   console.log("CONNECT");
        
      //   // //mostramos al cliente como que se ha conectado
      //   // sails.emit("refreshChat", "yo", "Bienvenido anonimo, te has conectado correctamente.");
    
      //   // //mostramos de forma global a todos los usuarios que un usuario se acaba de conectar al chat
      //   // sails.broadcast.emit("refreshChat", "conectado", "El usuario aaaa se ha conectado al chat.");
    
      //   // //actualizamos la lista de usuarios en el chat del lado del cliente
      //   // // io.sockets.emit("updateSidebarUsers", usuariosOnline);

      //   io.socket.on('user', function (tmessage) {

      //     console.log("AQUI");

      //   });

        // sails.on("refreshChat", function(action, message)
        // {
        //   console.log("va!");
        // });
 
      // });
      
      io.socket.on('connect', function socketConnected() {
        // console.log(this.socket);

         // Respond to user events.  You can always safely use the 
         // global `io.socket` to bind event handlers
         io.socket.on('/user', function (tmessage) {

          console.log(tmessage);

         });

         // Get the users and just spit them out to the console.  This will also
         // subscribe the socket to any events involving the returned users, which 
         // will then be handled by the `io.socket.on` code above.
         // io.socket.get('/user', console.log.bind(console));


      });
    </script>
  </body>
</html>
